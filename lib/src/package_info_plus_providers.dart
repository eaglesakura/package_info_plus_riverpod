import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:package_info_plus/package_info_plus.dart';
import 'package:riverpod/misc.dart';

/// [PackageInfo] を同期的にRiverpod経由で取得する.
///
final class PackageInfoPlusProviders {
  /// The app name.
  ///
  /// - `CFBundleDisplayName` on iOS and macOS, falls back to `CFBundleName`.
  ///   Defined in the `info.plist` and/or product target in xcode.
  /// - `application/label` on Android.
  ///   Defined in `AndroidManifest.xml` or String resources.
  /// - `app_name` from `version.json` on Web.
  ///   Defined in the `manifest.json`.
  /// - `app_name` from `version.json` on Linux.
  ///   Defined in the `CMakeLists.txt` file.
  /// - `ProductName` from the compiled executable file on Windows.
  ///    Defined in the `Runner.rc` file.
  static final appName = Provider<String>((ref) => throw UnimplementedError());

  /// The package name.
  ///
  /// - `bundleIdentifier` on iOS and macOS.
  ///   Defined in the product target in xcode.
  /// - `packageName` on Android.
  ///   Defined in `build.gradle` as `applicationId`.
  /// - `package_name` from `version.json` on Web and Linux
  ///   Generated by Flutter.
  /// - `InternalName` from the compiled executable file on Windows.
  ///   Defined in the `Runner.rc` file.
  static final packageName = Provider<String>(
    (ref) => throw UnimplementedError(),
  );

  /// The package version.
  /// Generated from the version in `pubspec.yaml`.
  ///
  /// - `CFBundleShortVersionString` on iOS and macOS.
  /// - `versionName` on Android.
  /// - `version` from `version.json` on Web and Linux.
  /// - `ProductVersion` from the compiled executable file on Windows.
  static final version = Provider<String>((ref) => throw UnimplementedError());

  /// The build number.
  /// Generated from the version in `pubspec.yaml`.
  ///
  /// - `CFBundleVersion` on iOS and macOs.
  /// - `versionCode` on Android.
  /// - `build_number` from `version.json` on Web and Linux.
  /// - `ProductVersion` from the compiled executable file on Windows.
  ///
  /// Note, on iOS if an app has no buildNumber specified this property will return version
  /// Docs about CFBundleVersion: https://developer.apple.com/documentation/bundleresources/information_property_list/cfbundleversion
  static final buildNumber = Provider<String>(
    (ref) => throw UnimplementedError(),
  );

  /// The build signature.
  /// SHA-256 signing key signature (hex) on Android.
  /// Empty string on all the other platforms.
  static final buildSignature = Provider<String>(
    (ref) => throw UnimplementedError(),
  );

  /// The installer store. Indicates through which store this application was installed.
  static final installerStore = Provider<String?>(
    (ref) => throw UnimplementedError(),
  );

  const PackageInfoPlusProviders._();

  /// 依存を解決して [PackageInfo] を取得する.
  static Future<List<Override>> inject() async {
    final info = await PackageInfo.fromPlatform();
    return injectWithValue(info);
  }

  /// [PackageInfo] から [Override] を生成する.
  static List<Override> injectWithValue(PackageInfo info) {
    return [
      appName.overrideWithValue(info.appName),
      packageName.overrideWithValue(info.packageName),
      version.overrideWithValue(info.version),
      buildNumber.overrideWithValue(info.buildNumber),
      buildSignature.overrideWithValue(info.buildSignature),
      installerStore.overrideWithValue(info.installerStore),
    ];
  }
}
